<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Boxer's Front End</title>
 <link href="http://boxersb.github.io/" rel="self"/>
 <link href="http://boxersb.github.io"/>
 <updated>2013-04-23T14:06:02+09:00</updated>
 <id>http://boxersb.github.io</id>
 <author>
   <name>boxersb</name>
   <email>boxersb@gmail.com</email>
 </author>

 
 <entry>
   <title>Jekyll 소개</title>
   <link href="http://boxersb.github.io/jekyll/2013/04/03/jekyll-introduction"/>
   <updated>2013-04-03T00:00:00+09:00</updated>
   <id>http://boxersb.github.io/jekyll/2013/04/03/jekyll-introduction</id>
   <content type="html">&lt;h2 id='jekyll_'&gt;Jekyll(지킬) 이란?&lt;/h2&gt;

&lt;p&gt;Jekyll은 Ruby Gem으로 제공되며 템플릿과 템플릿의 구성요소, 인라인 코드, 마크다운과 같은 동적인 구성요소를 정적인 웹페이지로 만들어주는 파싱 엔진이다.&lt;/p&gt;

&lt;p&gt;이 웹사이트도 Jekyll로 만들어져 있다. 그 밖의 다른 Jekyll 웹사이트는 &lt;a href='https://github.com/mojombo/jekyll/wiki/Sites'&gt;여기&lt;/a&gt;서 살펴볼 수 있다. &lt;br /&gt; &lt;br /&gt;&lt;/p&gt;

&lt;h2 id='github_pages_jekyll___'&gt;Github Pages와 Jekyll을 이용한 블로그 만들기&lt;/h2&gt;

&lt;p&gt;Github Pages와 Jekyll을 사용하면 git 기반 블로그를 만들 수 있다.&lt;br /&gt;rss는 물론 Atom도 지원하며, disqus나 facebook 소셜 플러그인을 사용하면, 댓글 기능도 활성화 할 수 있다.&lt;/p&gt;

&lt;h3 id='jekyll_'&gt;Jekyll 설치&lt;/h3&gt;

&lt;p&gt;Jekyll은 Ruby gem으로 제공되므로 커멘드 라인에서 아래와 같이 설치한다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;gem install jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id='jekyllbootstrap_'&gt;Jekyll-Bootstrap 설치&lt;/h3&gt;

&lt;p&gt;먼저, &lt;a href='https://github.com'&gt;Github&lt;/a&gt;에서 SITENAME.github.com 과 같은 이름의 저장소를 만든다.&lt;br /&gt;SITENAME은 만들려는 사이트의 이름이다.&lt;/p&gt;

&lt;p&gt;다음으로, Jekyll-Bootstrap을 설치한다.&lt;br /&gt;Jekyll-Bootstrap은 Jekyll을 사용한 사이트를 만들기위해 필요한 작업을 간단하게 처리해준다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;git clone https://github.com/plusjade/jekyll-bootstrap.git SITENAME.github.com
&lt;span class='nv'&gt;$ &lt;/span&gt;&lt;span class='nb'&gt;cd &lt;/span&gt;SITENAME.github.com
&lt;span class='nv'&gt;$ &lt;/span&gt;git remote &lt;span class='nb'&gt;set&lt;/span&gt;-url origin git@github.com:YOURACCOUNT/SITENAME.github.com.git
&lt;span class='nv'&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;앞서 만들어 두었던 SITENAME.github.com 저장소에 jekyll-bootstrap을 clone 한다.&lt;br /&gt;그런 다음, git remote set-url 을 사용하여 origin을 다시 SITENAME.github.com으로 수정한다.&lt;br /&gt;마지막으로, clone 받아둔 jekyll-bootstrap 파일들까지 원격 저장소에 push 한다.&lt;/p&gt;

&lt;p&gt;여기까지 수행하면, 블로그를 만들기위한 기본적인 jekyll 설정이 끝난셈이다. &lt;strong&gt;&lt;em&gt;Very Simple!!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;h3 id='__'&gt;로컬 서버 띄우기&lt;/h3&gt;

&lt;p&gt;jekyll은 로컬 웹서버도 지원한다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;jekyll --server
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;웹 서버를 시작하면, 현재 사이트에서 변경된 파일들을 모아, static html 파일들을 자동으로 생성해준다.&lt;br /&gt;브라우저에서는 http://localhost:4000 으로 방금 만든 사이트를 테스트해볼 수 있다.&lt;/p&gt;

&lt;h3 id='_'&gt;테마 사용하기&lt;/h3&gt;

&lt;p&gt;jekyll은 테마기능도 지원한다. &lt;a href='http://themes.jekyllbootstrap.com/'&gt;Jekyll 공식 테마 살펴보기&lt;/a&gt;&lt;br /&gt;테마는 여러개를 하나의 Jekyll 사이트에 설치할 수 있으며, 테마 스위칭 기능도 지원한다. 물론, 테마는 커스터마이징이 가능하다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;테마 설치하기&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rake theme:install &lt;span class='nv'&gt;git&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;https://github.com/jekyllbootstrap/theme-the-program.git&amp;quot;&lt;/span&gt;
&lt;span class='nv'&gt;$ &lt;/span&gt;rake theme:install &lt;span class='nv'&gt;git&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;https://github.com/boxersb/jekyll-theme-slate.git&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;strong&gt;테마 스위칭&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rake theme:switch &lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;the-program&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='jekyll_'&gt;Jekyll 설정하기&lt;/h2&gt;

&lt;p&gt;Jekyll 사이트에 대한 설정은 /_config.yml 파일에 수록된다.&lt;br /&gt;여기서는, 포스트의 permalink 스키마 변경이나, 사이트 소유자 정보, 사이트명, 코멘트나 분석툴 같은 외부 도구등을 설정할 수 있다.&lt;/p&gt;

&lt;h3 id='_'&gt;댓글 사용하기&lt;/h3&gt;

&lt;p&gt;_config.yml 파일에서 comments 절의 내용을 수정하면 된다.&lt;br /&gt;여기서는 facebook 소셜 플러그인을 사용하였다. 각 댓글 서비스별로 수정이 필요한 곳은 FIXME로 표시해둔 부분을 참조하면 된다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;comments&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt;
  &lt;span class='n'&gt;provider&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;facebook&lt;/span&gt; &lt;span class='c1'&gt;#FIXME&lt;/span&gt;
  &lt;span class='n'&gt;disqus&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='n'&gt;short_name&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;abc&lt;/span&gt;  &lt;span class='c1'&gt;#FIXME&lt;/span&gt;
  &lt;span class='n'&gt;livefyre&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='n'&gt;site_id&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;abc&lt;/span&gt; &lt;span class='c1'&gt;#FIXME&lt;/span&gt;
  &lt;span class='n'&gt;intensedebate&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='n'&gt;account&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;abc&lt;/span&gt; &lt;span class='c1'&gt;#FIXME&lt;/span&gt;
  &lt;span class='n'&gt;facebook&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='n'&gt;appid&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;abc&lt;/span&gt;   &lt;span class='c1'&gt;#FIXME&lt;/span&gt;
    &lt;span class='n'&gt;num_posts&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;
    &lt;span class='ss'&gt;width&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;640&lt;/span&gt;
    &lt;span class='ss'&gt;colorscheme&lt;/span&gt;&lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;light&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id='__'&gt;사이트 분석툴 사용하기&lt;/h3&gt;

&lt;p&gt;_config.yml 파일에서 analytics 절의 내용을 수정하면 된다.&lt;br /&gt;여기서는 Google Analytics를 사용하였다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='ruby'&gt;&lt;span class='n'&gt;analytics&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt;
    &lt;span class='n'&gt;provider&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;google&lt;/span&gt; 
    &lt;span class='n'&gt;google&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; 
        &lt;span class='n'&gt;tracking_id&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;UA-123-12&amp;#39;&lt;/span&gt; &lt;span class='c1'&gt;#FIXME&lt;/span&gt;
    &lt;span class='n'&gt;getclicky&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt;
      &lt;span class='n'&gt;site_id&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='n'&gt;abc&lt;/span&gt;     &lt;span class='c1'&gt;#FIXME&lt;/span&gt;
    &lt;span class='n'&gt;mixpanel&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt;
        &lt;span class='n'&gt;token&lt;/span&gt; &lt;span class='p'&gt;:&lt;/span&gt; &lt;span class='s1'&gt;&amp;#39;_MIXPANEL_TOKEN_&amp;#39;&lt;/span&gt;  &lt;span class='c1'&gt;#FIXME&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='id3'&gt;블로깅하기&lt;/h2&gt;

&lt;p&gt;Jekyll + Github Pages 를 활용한 블로깅은, 기본적으로 마크다운 파일을 만들고(rake를 활용한 명령어가 지원된다), jekyll로 파싱한다음, 해당 git 저장소의 master 브랜치에 push 해야 정상적으로 Deploy가 된다. 매우 개발스러운 방법이지만, Rich Text Editing을 싫어하며 웹 호스팅하기 아까운 나같은 사람한테는 딱 좋은 플랫폼인 셈이다.&lt;/p&gt;

&lt;h3 id='__'&gt;새 포스트 만들기&lt;/h3&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rake post &lt;span class='nv'&gt;title&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Hello World&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이렇게 rake를 사용한 명령어를 사용하면 지정된 포스트에 해당되는 마크다운 파일이 만들어진다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;Creating new post: ./_posts/2013-04-03-hello-world.md&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;해당 마크다운 파일을 열면, 다음과 같은 기본 템플릿이 생성되었음을 알 수 있다.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;#8212;-&lt;br /&gt;layout: post&lt;br /&gt;title: &amp;#8220;Hello World&amp;#8221;&lt;br /&gt;description: &amp;#8221;&amp;#8221;&lt;br /&gt;category: &lt;br /&gt;tags: []&lt;br /&gt;&amp;#8212;-&lt;br /&gt;{ % include JB/setup % }&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;대충 감이 왔겠지만, title과 description, tags 절을 적절히 커스터 마이즈하고, { % include JB/setup % } 이후 부터 markdown 문법을 사용하여 post를 작성하면 된다.&lt;/p&gt;

&lt;h3 id='_'&gt;페이지 만들기&lt;/h3&gt;

&lt;p&gt;포스트 외에 페이지도 만들 수 있다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;rake page &lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;about.md&amp;quot;&lt;/span&gt;
&lt;span class='nv'&gt;$ &lt;/span&gt;rake page &lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;pages/profile.md&amp;quot;&lt;/span&gt;
&lt;span class='nv'&gt;$ &lt;/span&gt;rake page &lt;span class='nv'&gt;name&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;pages/blogs&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 명령어를 실행한 후 결과메세지를 참고해서 해당 파일을 수정하면 된다.&lt;/p&gt;

&lt;h3 id='id4'&gt;배포하기&lt;/h3&gt;

&lt;p&gt;jekyll &amp;#8211;server를 사용하여 로컬 웹서버로 생성한 페이지 및 포스트를 모두 확인했다면, 실제로 웹에 노출되도록 배포해야한다.&lt;br /&gt;Git 페이지 기반이며, Github Pages에서는 저장소의 master 브랜치에 해당되는 내용을 표시하므로, 간단히 master 브랜치로 변경사항을 push 하기만 하면 된다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='bash'&gt;&lt;span class='nv'&gt;$ &lt;/span&gt;git add .
&lt;span class='nv'&gt;$ &lt;/span&gt;git commit -m &lt;span class='s2'&gt;&amp;quot;new post(Jekyll 소개)&amp;quot;&lt;/span&gt;
&lt;span class='nv'&gt;$ &lt;/span&gt;git push origin master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</content>
 </entry>
 
 <entry>
   <title>TypeScript 언어 명세 - 개요</title>
   <link href="http://boxersb.github.io/typescript/2013/03/20/boxersbgithubcom"/>
   <updated>2013-03-20T00:00:00+09:00</updated>
   <id>http://boxersb.github.io/typescript/2013/03/20/boxersbgithubcom</id>
   <content type="html">&lt;h1 id='__'&gt;언어의 기본 컨셉&lt;/h1&gt;

&lt;p&gt;TypeScript는 대형 자바스크립트 애플리케이션에 적합한 대안 언어이다. TypeScript를 활용하여 개발하여도 기존의 소프트웨어 컴포넌트와 자바스크립트 라이브러리의 동작 방식과는 충돌하지 않는다. 또한, 동적인 모듈 로딩을 지원하여 네이밍 충돌 문제를 줄일 수 있게 해주며, 추가된 타입 체계를 바탕으로 생산성을 높여주는 여러가지 툴과 사례(정적 타이핑, 심볼 기반 네비게이션, 구문 완성, 코드 리펙토링 등)를 활용할 수 있다.&lt;/p&gt;

&lt;p&gt;TypeScript는 &lt;strong&gt;&lt;em&gt;ES5 (ECMAScript 5)&lt;/em&gt;&lt;/strong&gt; 문법의 상위 집합(Super Set)이다. 모든 자바스크립트 프로그램은 TypeScript 프로그램이기도 하다. TypeScript 컴파일러는 TypeScript 문법을 자바스크립트 문법으로 변환시켜주며, 이때 코드에서 변수를 정의한 순서나 이름을 바꾸지 않는다. 따라서, 자바스크립트 결과물을 브라우저에서 디버깅하여 TypeScript 코드를 수정하기에도 용이하다. 또한, 부가적으로 소스 맵도 제공하므로 TypeScript 소스를 직접 디버깅하는것도 가능하다. TypeScript를 지원하는 도구들은 일반적으로 코드 저장시 자바스크립트 결과물을 생산하며, 기존의 자바스크립트 개발 사이클 대로 프로젝트를 진행할 수 있다.&lt;/p&gt;

&lt;p&gt;TypeScript는 &lt;strong&gt;&lt;em&gt;ES6 (ECMAScript 6)&lt;/em&gt;&lt;/strong&gt;에서 제안된 여러가지 기능들과 클래스, 모듈등의 문법도 포함되어 있다. 클래스는 전통적인 객체 지향 프로그래밍 패턴을 기반으로 상속과 같은 기능들을 자바스크립트 보다 훨씬 표현력있게 사용할 수 있다. 모듈은 네이밍 충돌 문제와 자유롭게 코드를 컴포넌트화 할 수 있게 해준다. 컴파일러에서는 모듈을 정적 또는 동적으로 로드할 수 있도록 하는 “모듈 코드 생성 (Module Code Generation)” 옵션을 제공하고 있다.&lt;/p&gt;

&lt;p&gt;TypeScript에서는 Closure에서 정의한 JSDoc 주석과 비슷하지만, 주석이 아니라 문법에 직접적으로 통합시킨 타입 주석 시스템을 제공한다. 이렇게 짜여진 코드는 가독성이 좋고 변수와 일치하는 타입 주석을 일일이 연결하지 않아도 되므로 유지보수 비용을 많이 줄일 수 있다.&lt;/p&gt;

&lt;p&gt;이런 타입 시스템은 타입 추정을 좀 더 용이하게 한다. 예를 들면 다음의 코드는 변수 “i”가 number 형이라고 추정할 수 있을 것이다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;i&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;다음의 함수 정의에서 함수 f는 문자열 타입을 반환할것으로 추정할 수 있다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;몇가지 훌륭한 툴에서는는 변수 또는 반환값의 타입을 자동으로 추정하여 해당 타입의 멤버 메서드의 목록을 자동으로 출력해주는 서비스를 받을 수 있다. &lt;img alt='' src='http://media.tumblr.com/cfa552dd51ed3f87a388faed6dca561c/tumblr_inline_mgm9p10OPo1qct7gv.png' /&gt;&lt;/p&gt;

&lt;p&gt;그러나, TypeScript의 타입 주석으로 형식을 명시해 주면, 개발자에게도 많은 이득이 있다. 위의 함수 f를 다음의 코드와 같이 수정해두면, 원하지 않는 타입의 값이 매개변수로 사용되는것을 막을 수 있다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;s&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;s&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;&lt;span class='err'&gt; &lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;({});&lt;/span&gt;            &lt;span class='c1'&gt;// Error&lt;/span&gt;
&lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;    &lt;span class='c1'&gt;// Ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;매개변수 s에 타입 주석으로 : string을 사용함으로써 함수 f는 매개변수 s를 문자열만 받아들이는 함수로 정의되었고, 실제로 함수 f에서는 문자열로 취급한다. TypeScript 컴파일러는 문자열을 필요로 하는 함수 f에 객체 {}를 전달하였을 경우 오류를 표시한다. 반면, 문자형인 &amp;#8220;hello&amp;#8221;를 전달하였을 경우에는 정상 동작하게 된다.&lt;/p&gt;

&lt;p&gt;이 TypeScript 코드를 컴파일하여 생산된 자바스크립트 코드에서는 이 타입 주석이 깨끗히 제거된다. 런타임시의 타입 추정 이전에 TypeScript 컴파일을 거쳐서 타입을 검사하기 때문에 실제 자바스크립트 애플리케이션을 더욱 견고하게 작성할 수 있다.&lt;/p&gt;

&lt;h2 id='_'&gt;앰비언트 선언&lt;/h2&gt;

&lt;p&gt;TypeScript 컴파일러는 기본적으로 정의되지 않은 변수에 접근시 오류를 발생시킨다. 그러나, document나 window와 같이 브라우저에서 미리 정의해둔 객체나 jQuery와 같은 외부 라이브러리를 함께 사용할 수 있기 때문에, 이럴경우를 대비해서 앰비언트 선언을 사용할 수 있다. 앰비언트 선언은 타입을 명시하지 않는다. 컴파일러는 앰비언트로 선언된 변수를 &amp;#8220;any&amp;#8221; 타입이라고 추정한다. 마찬가지로, 개발툴에서도 해당 변수에 대해 특정 타입으로 가정할 수 없다. 브라우저의 document를 사용하기 위해서는 아래와 같이 앰비언트 선언을 하면 된다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;declare&lt;/span&gt; &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='nb'&gt;document&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;title&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='c1'&gt;// document를 앰비언트 선언하였으므로 오류가 발생하지 않는다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;사실, document의 경우엔 TypeScript 컴파일러가 자동으로 앰비언트 선언문을 가지고 있다. &amp;#8216;lib.d.ts&amp;#8217;라는 라이브러리를 포함하기 때문인데, 이 라이브러리에는 DOM과 같은 빌트인 자바스크립트 라이브러리에 대한 선언이 들어있다.&lt;/p&gt;

&lt;p&gt;그러나, jQuery에 대한 인터페이스는 정의되어 있지 않으므로, 다음과 같이 앰비언트 선언을 해서 사용해야 한다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;declare&lt;/span&gt; &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='function_'&gt;Function 타입&lt;/h2&gt;

&lt;p&gt;TypeScript의 함수는 자바스크립트의 함수가 가진 특징들을 좀 더 표현력있게 사용할 수 있도록 문법이 개선되었다. TypeScript 함수의 선언 부분은 다음과 같이 정의할 수 있다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;vote&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;candidate&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;result&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;any&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='c1'&gt;// do Something..&lt;/span&gt;
&lt;span class='err'&gt;￼&lt;/span&gt;&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nx'&gt;vote&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;BigPig&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;result&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;result&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;BigPig&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='c1'&gt;// ...&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 예제에서 함수 vote의 매개변수 candidate는 문자열 타입이어야하며, callback는 문자열 타입의 result를 매개변수로 받아들이고, any 타입을 반환하는 함수 타입이어야 한다.&lt;/p&gt;

&lt;h2 id='object_'&gt;Object 타입&lt;/h2&gt;

&lt;p&gt;TypeScript의 Object(이하 객체) 타입은 형상을 정의할 수 있다. 다음의 코드는 MakePoint 라는 함수의 반환형으로 객체 타입의 리터럴을 지정하고 있다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;MakePoint&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;  &lt;span class='nx'&gt;y&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;객체 타입에는 이름도 부여할 수가 있는데 이를 객체 타입 인터페이스라고 한다. 다음의 코드는 name이라는 필수 필드와 favoriteColor라는 부가적인 필드가 정의된 객체 타입 인터페이스 예제이다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kr'&gt;interface&lt;/span&gt; &lt;span class='nx'&gt;Friend&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;name&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='nx'&gt;favoriteColor&lt;/span&gt;&lt;span class='o'&gt;?:&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;add&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;friend&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;Friend&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;name&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;friend&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;name&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nx'&gt;add&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;name&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;홍길동&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;});&lt;/span&gt;    &lt;span class='c1'&gt;// Ok&lt;/span&gt;
&lt;span class='nx'&gt;add&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;favoriteColor&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;파랑&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;});&lt;/span&gt;    &lt;span class='c1'&gt;// name이 빠졌으므로 오류가 발생한다.&lt;/span&gt;
&lt;span class='nx'&gt;add&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;name&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;임꺽정&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;favoriteColor&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;녹색&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;});&lt;/span&gt;    &lt;span class='c1'&gt;// Ok&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;TypeScript의 객체 타입 모델은 자바스크립트의 객체를 다양하게 표현할 수 있게 한다. 예를 들면, jQuery에서는 get과 같은 여러가지 메서드를 포함하는 $ 라는 객체를 정의하고 있다. 그러나, 사용하는 입장에서는 $를 함수로 사용하기도 한다. 이때, $ 함수는 전달되는 매개변수의 타입에 따라 동작이 달라진다. 다음의 코드는 jQuery의 일부분을 TypeScript 객체 인터페이스로 정의한 예제이다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kr'&gt;interface&lt;/span&gt; &lt;span class='nx'&gt;JQuery&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;text&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;content&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kr'&gt;interface&lt;/span&gt; &lt;span class='nx'&gt;JQueryStatic&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;url&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;callback&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;any&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;query&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;JQuery&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nx'&gt;declare&lt;/span&gt; &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;JQueryStatic&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;

&lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;get&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;http://mysite.org/divContent&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;$&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;).&lt;/span&gt;&lt;span class='nx'&gt;text&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='p'&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JQueryStatic 인터페이스는 또다른 JQuery 인터페이스를 참조한다. 즉, JQueryStatic 객체 인터페이스는 호출 가능한 함수 타입으로 사용될 수 있다. 물론, get 이라는 메서드도 정의 되어 있다. 이 예제에서 알 수 있는것은 TypeScript의 함수 타입도 호출 가능한 TypeScript 객체 타입이라는 점이다. (자바스크립트의 함수와 객체의 관계와 유사하다.) 다음의 예제 코드에서는 함수를 객체 타입 리터럴로 정의하고 있다. 처음의 두 라인은 동일한 타입을 다른 형태로 정의한 예이다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;sameType&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;    &lt;span class='c1'&gt;// Ok&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;nope&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;sameType&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;     &lt;span class='c1'&gt;// 오류: 타입이 일치하지 않는다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 jQuery의 $ 함수를 이야기 할때, $ 함수는 전달되는 매개변수의 타입에 따라 동작이 달라진다고 했다. 이런 함수의 호출 시스템을 &amp;#8220;오버로딩&amp;#8221; 이라고 하는데, TypeScript에서는 간단하게 객체 인터페이스를 추가 정의함으로써 함수 오버로딩을 구현할 수 있다. JQueryStatic 예제에서 함수 타입을 받아들이는 인터페이스를 추가 구현해 볼 수 있을것이다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;ready&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;any&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;any&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;$ 함수에 ready라는 함수를 매개변수로 전달함으로써 다른 동작을 추가 구현할 수 있다.&lt;/p&gt;

&lt;h2 id='_'&gt;구조체 서브타이핑&lt;/h2&gt;

&lt;p&gt;객체 타입은 구조적으로 비교가 가능하다. 예를 들어, 아래 예제의 CPoint 클래스는 Point 인터페이스와 일치하는데, CPoint는 Point 인터페이스에서 요구하는 멤버들을 모두 갖추고 있기 때문이다. 그러므로, 컴파일러는 이 두 타입을 구조적으로 비교할 수 있다. 예제에서는 요구된 모든 멤버를 공급하는 객체 리터럴로 객체의 타입을 비교할 수 있음 또한 보여준다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kr'&gt;interface&lt;/span&gt; &lt;span class='nx'&gt;Point&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='nx'&gt;y&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;getX&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;p&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;Point&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;p&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kr'&gt;class&lt;/span&gt; &lt;span class='nx'&gt;CPoint&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='nx'&gt;constructor&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kr'&gt;public&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='kr'&gt;public&lt;/span&gt; &lt;span class='nx'&gt;y&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nx'&gt;getX&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;CPoint&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;));&lt;/span&gt;		&lt;span class='c1'&gt;// Ok, 필드가 일치함&lt;/span&gt;
&lt;span class='nx'&gt;getX&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;y&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;color&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;red&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;});&lt;/span&gt;	&lt;span class='c1'&gt;// 추가 필드(color)가 있는건 괜찮음&lt;/span&gt;
&lt;span class='nx'&gt;getX&lt;/span&gt;&lt;span class='p'&gt;({&lt;/span&gt; &lt;span class='nx'&gt;x&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt; &lt;span class='p'&gt;});&lt;/span&gt;		&lt;span class='c1'&gt;// 오류 : y 필드가 빠졌으므로 인터페이스에 맞지 않음&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id='__'&gt;문맥 기반 타이핑&lt;/h2&gt;

&lt;p&gt;통상적으로 TypeScript 타입 추정은 &amp;#8220;bottom-up(아래에서 위)&amp;#8221;으로 이루어진다. 즉, 표현식의 끝에서 시작점으로 추정한다. 다음의 예제에서는 함수 &amp;#8220;mul&amp;#8221;의 반환 타입을 return 표현식에서부터 추정하여 &amp;#8220;number&amp;#8221;라고 결론지을 수 있다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;mul&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;a&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;b&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;a&lt;/span&gt; &lt;span class='o'&gt;*&lt;/span&gt; &lt;span class='nx'&gt;b&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;타입 주석이나 기본값을 정의하지 않은 변수나 매개변수는, TypeScript에서 &amp;#8220;any&amp;#8221; 타입으로 추정한다. 이 경우 컴파일러는 함수의 호출부에서 해당 함수의 반환 타입을 추정하기 위한 정보를 필요로 하지 않는다. 일반적으로, 이 &amp;#8220;bottom-up&amp;#8221; 접근 방식은 개발자에게 명확한 타입 정보의 흐름을 제공한다.&lt;/p&gt;

&lt;p&gt;그러나, 몇가지 제한된 문맥에서는 표현식의 문백으로부터 &amp;#8220;top-down(위에서 아래)&amp;#8221;으로 추정한다. 이 경우를 문맥 기반 타이핑이라고 부른다. 문맥 기반 타이핑은 개발자가 타입을 사용하지만, 타입의 세부적인 사항을 모두 알지는 못할때 개발툴이 알맞은 정보를 제공하도록 돕는 역할을 한다. 예를 들어, 위의 jQuery 예제는 get 메서드의 두번째 매개변수로 함수 표현식을 사용하였다. 해당 표현식을 타이핑 하는 동안 개발툴은 함수 표현식의 타입을 get을 정의할때 설정한 대로 가정하며 매개변수 명과 타입에 대한 템플릿도 제공한다.&lt;/p&gt;

&lt;h2 id='id1'&gt;클래스&lt;/h2&gt;

&lt;p&gt;TypeScript는 현재 ES6에서 제안된 객체 지향 문법과 아주 비슷한 문법을 제공한다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kr'&gt;class&lt;/span&gt; &lt;span class='nx'&gt;BankAccount&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='nx'&gt;balance&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='nx'&gt;deposit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;credit&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;balance&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='nx'&gt;credit&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
		&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;balance&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드를 컴파일하면 다음과 같은 자바스크립트 코드로 변환된다&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;BankAccount&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;BankAccount&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;balance&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
	&lt;span class='nx'&gt;BankAccount&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;deposit&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;credit&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
		&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;balance&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='nx'&gt;credit&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
		&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;balance&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='p'&gt;};&lt;/span&gt;
	
	&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;BankAccount&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 TypeScript 코드에서 BankAccount라는 클래스를 정의하였는데 동일한 이름으로 인스턴스 타입을 정할수도 있다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kr'&gt;interface&lt;/span&gt; &lt;span class='nx'&gt;BankAccount&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='nx'&gt;balance&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='nx'&gt;deposit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;credit&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BankAccount 클래스에 함수인 constructor를 추가 정의하였다면, 다음과 같은 형태로 변수를 선언할 수 있다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;BankAccount&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;=&amp;amp;&lt;/span&gt;&lt;span class='nx'&gt;gt&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; &lt;span class='nx'&gt;BankAccount&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;BankAccount 클래스가 초기화될때 balance도 초기화 하고싶다면 constructor를 정의하여야한다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kr'&gt;class&lt;/span&gt; &lt;span class='nx'&gt;BankAccount&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='nx'&gt;balance&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='nx'&gt;constructor&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;initially&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;balance&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;initially&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
	&lt;span class='nx'&gt;deposit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;credit&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;balance&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='nx'&gt;credit&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
		&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;balance&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 코드에서 생성자인 constructor는 initially라는 number형 매개변수를 받아서 공개 필드인 balance를 설정하고 있다. 이런 일반적인 경우는 다음과 같이 짧게 표현할 수 있다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kr'&gt;class&lt;/span&gt; &lt;span class='nx'&gt;BankAccount&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='nx'&gt;constructor&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kr'&gt;public&lt;/span&gt; &lt;span class='nx'&gt;balance&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
	&lt;span class='nx'&gt;deposit&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;credit&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;balance&lt;/span&gt; &lt;span class='o'&gt;+=&lt;/span&gt; &lt;span class='nx'&gt;credit&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
		&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;balance&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;public 키워드는 생성자의 매개변수가 곧 필드가 될것임을 암시한다. public는 기본 클래스 멤버의 접근 지시자이다. 그러나, 클래스 멤버로 private 접근 지시자를 설정할 수도 있다.&lt;/p&gt;

&lt;p&gt;TypeScript 클래스는 다음 예제와 같이 상속도 지원한다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kr'&gt;class&lt;/span&gt; &lt;span class='nx'&gt;CheckingAccount&lt;/span&gt; &lt;span class='kr'&gt;extends&lt;/span&gt; &lt;span class='nx'&gt;BankAccount&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='nx'&gt;constructor&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;balance&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='kr'&gt;super&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;balance&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
	&lt;span class='nx'&gt;writeCheck&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;debit&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;number&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;balance&lt;/span&gt; &lt;span class='o'&gt;-=&lt;/span&gt; &lt;span class='nx'&gt;debit&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 예제에서 CheckingAccount는 BankAccount 클래스를 상속받는다. 생성자에서는 super 키워드를 통해 부모 클래스인 BankAccount의 생성자를 호출하고 있다. 자바스크립트로 컴파일된 코드에서는 CheckingAccount는 BankingAccount와 프로토타입 체인으로 엮이게 된다.&lt;/p&gt;

&lt;p&gt;TypeScript의 클래스에서는 static 멤버도 지정할 수 있다. static 클래스 멤버는 클래스 생성자의 프로퍼티가 된다.&lt;/p&gt;

&lt;h2 id='id2'&gt;모듈&lt;/h2&gt;

&lt;p&gt;TypeScript는 private 멤버를 두어 사용에 제한을 둠으로써 설계 단계에서 클래스 구현시 캡슐화 개념을 사용할 수 있다. 그러나, 런타임시에는 이 캡슐화를 강제하지 못하는데, 모든 객체 프로퍼티는 런타임시에는 접근 가능하기 때문이다. 향후 버전의 자바스크립트에서는 아마도 private 개념이 본격적으로 지원되어 런타임시에도 private 멤버를 강제할 수 있게 될것이다.&lt;/p&gt;

&lt;p&gt;현재 버전의 자바스크립트에서 런타임시 멤버를 캡슐화 시키는 유일한 방법은 모듈 패턴을 사용하는 것이다. 모듈 패턴은 소프트웨어 컴포넌트만의 영역을 조성함으로써 구조를 조직하고 동적 로딩 옵션을 제공하기 위한 자연스러운 방법이다. 또한, 모듈은 네임스페이스 기능을 제공하여 대부분의 소프트웨어 컴포넌트가 전역 네임스페이스를 사용하지 않아도 되도록 한다.&lt;/p&gt;

&lt;p&gt;다음의 예제는 자바스크립트 모듈 패턴을 보여준다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;exports&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;key&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;generateSecretKey&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
	&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;sendMessage&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;message&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
		&lt;span class='nx'&gt;sendSecureMessage&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;message&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;key&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
	&lt;span class='nx'&gt;exports&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;sendMessage&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;sendMessage&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;})(&lt;/span&gt;&lt;span class='nx'&gt;MessageModule&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 예제에서는 모듈 패턴의 두가지 본질적인 요소인 모듈 클로저와 모듈 객체가 들어있다. 모듈 클로저는 모듈의 구현을 캡슐화하는 함수이다. 이 경우에서는 변수 &amp;#8216;key&amp;#8217;와 함수 &amp;#8216;sendMessage&amp;#8217;가 캡슐화 되었다. 모듈 객체에는 추출된 모듈 변수와 함수가 포함된다. 간단한 모듈에서는 모듈 객체를 생성하고 반환할 것이다. 위 모듈에서는 모듈객체를 매개변수 &amp;#8216;exports&amp;#8217;로 취하며, sendMessage 프로퍼티를 모듈 객체에 추가하였다. 이렇게 모듈의 멤버를 증가시키는 접근법은 모듈의 동적 로딩을 간단하게 해주고 다수의 파일로 모듈의 코드를 분산시키는 방식을 제공한다.&lt;/p&gt;

&lt;p&gt;또한, generateSecretKey와 sendSecureMessage 함수가 lexical 범위내 존재한다고 가정하므로, 위 예제에서는 해당 함수들이 존재하는 바깥쪽 범위도 모듈 객체에 할당된다.&lt;/p&gt;

&lt;p&gt;TypeScript의 모듈은 더 간결하게 모듈 패턴을 표현하는 메카니즘을 제공한다. TypeScript에서 개발자는 모듈과 클래스를 모듈 바깥에 중첩시킴으로써 모듈 패턴과 클래스 패턴을 조합할 수 있다.&lt;/p&gt;

&lt;p&gt;다음의 예제는 간단한 모듈을 정의하고 사용하는 코드이다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;module&lt;/span&gt; &lt;span class='nx'&gt;M&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;s&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='kr'&gt;export&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;s&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='nx'&gt;M&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='nx'&gt;M&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;s&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;	&lt;span class='c1'&gt;// 오류, s는 추출되지 않았다.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 예제에서, 변수 &amp;#8216;s&amp;#8217;는 모듈의 private 변수이지만, 함수 &amp;#8216;f&amp;#8217;는 모듈에서 추출되어 모듈 바깥에서 해당 코드에 접근할 수 있다. 모듈 &amp;#8216;M&amp;#8217;을 인터페이스와 변수로 묘사하자면 다음과 같다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kr'&gt;interface&lt;/span&gt; &lt;span class='nx'&gt;M&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;string&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;

&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;M&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;M&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;인터페이스 &amp;#8216;M&amp;#8217;은 모듈 &amp;#8216;M&amp;#8217;이 외부에 노출하는 기능들을 요약하고 있다. 이 예제에서, 변수 초기화를 위해 동일한 이름의 인터페이스를 사용할 수 있다. TypeScript에서는 타입명과 변수명은 충돌하지 않기 때문이다. 각 lexical 범위는 변수 정의 공간과 타입 정의 공간이 포함되어있다.&lt;/p&gt;

&lt;p&gt;모듈 &amp;#8216;M&amp;#8217;은 전역 모듈에 중첩되어 있으므로 내부 모듈의 한 예제이다. TypeScript 컴퍼일러는 모듈 코드를 다음과 같은 자바스크립트로 코드로 변환한다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;M&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;M&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
	&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;s&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
		&lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;s&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
	&lt;span class='p'&gt;}&lt;/span&gt;
	&lt;span class='nx'&gt;M&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;f&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
&lt;span class='p'&gt;})(&lt;/span&gt;&lt;span class='nx'&gt;M&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;M&lt;/span&gt;&lt;span class='o'&gt;=&lt;/span&gt;&lt;span class='p'&gt;{}));&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이 경우에, 컴파일러는 모듈 객체가 초기화 되었든 되지 않았던간에 필요한 모듈 객체로 전역 변수 &amp;#8216;M&amp;#8217;이 존재한다고 가정한다.&lt;/p&gt;

&lt;p&gt;또한, TypeScript는 외부 모듈도 지원한다. 외부 모듈은 최 상위에 exrort 또는 import 지시자로 지정한다. 이 모듈의 타입은 TypeScript 컴파일러가 모듈 클로저와 지정된 동적 로딩 시스템에 따라서 다양하게 모듈 객체 구현 코드를 생산한다. 예를 들면, 비동기 모듈 정의 시스템과 같은 것들이다.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>2010년 웹개발 트랜드와 방향성</title>
   <link href="http://boxersb.github.io/etc/2010/04/29/state-of-web-development-2010"/>
   <updated>2010-04-29T00:00:00+09:00</updated>
   <id>http://boxersb.github.io/etc/2010/04/29/state-of-web-development-2010</id>
   <content type="html">&lt;p&gt;현재 웹개발의 트렌드는 어떻게 흘러가고 있을까요?&lt;/p&gt;

&lt;p&gt;&lt;a href='http://johnfallsopp.com/'&gt;John Allsopp&lt;/a&gt;은 &lt;a href='http://www.webdirections.org/sotw10/'&gt;2010년 웹개발 현황에 대한 최신 설문조사결과&lt;/a&gt;를 갖고 돌아왔습니다.&lt;/p&gt;

&lt;p&gt;설문조사자료를 정리한 데이터와 함께 전체적 현황을 정리한 &lt;a href='http://webdirections.org/images/sowd10overview.pdf'&gt;PDF 파일&lt;/a&gt;도 공개했습니다.&lt;/p&gt;

&lt;p&gt;&lt;img alt='State of web development 2010' src='/imgs/state_of_webdev2010.jpg' /&gt;&lt;/p&gt;

&lt;p&gt;한눈에 현재 웹개발 트랜드가 눈에 들어옵니다만. 눈에 띄는 변화들을 정리해보았습니다 :&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;소수의 응답자들만이 웹브라우징용으로 IE를 사용하는데 반해 IE8의 경우 개발자들이 가장 많이 테스트하는 브라우저로 나타났습니다.&lt;/li&gt;

&lt;li&gt;구글 Chrome은 비약적으로 점유율이 상승해 개발자들이 사용하는 브라우저 순위 3위로 뛰었습니다.&lt;br /&gt;20%인 Safari를 17%로 바짝 추격하고 있습니다.&lt;/li&gt;

&lt;li&gt;Firefox는 어쨋든 1위를 지켜냈습니다. 그러나 응답자들은 설문조사 시점에 3.5와 3.6사이를 구분짓는 모습을 보였습니다.&lt;/li&gt;

&lt;li&gt;Firefox 3.6은 설문조사가 있기 1주일전에 발표되었습니다.&lt;/li&gt;

&lt;li&gt;과반수 이상의 응답자들이 현재 Mac OSX를 기본 운영체제로 사용하고 있었습니다.&lt;/li&gt;

&lt;li&gt;Android의 사용률이 4%에 머무는 동안 응답자의 거의 3분의 1이 모바일 Safari를 사용하고 있었습니다.. (16%에서 증가)&lt;/li&gt;

&lt;li&gt;JQuery는 응답자의 80%가 사용중이라고 답하면서 지난해 63% 보다 더 지배적인 점유율을 유지하고 있습니다.&lt;/li&gt;

&lt;li&gt;Cappuccino 나 SproutCore와 같은 Desktop 어플리케이션 개발형식의 웹개발 프레임워크는 일부 넓은 시야를 가진 개발자들에게서만 약간의 반응이 있었습니다.&lt;br /&gt;이러한 웹개발 프레임워크는 아마도 시기상조이거나 개발자들에 의해서 Desktop 어플리케이션 개발형식을 흉내낸다는 것처럼 무시를 당하고 있는것 같습니다.&lt;/li&gt;

&lt;li&gt;웹개발기술들중 CSS3, 웹폰트 그리고 HTML5 는 큰 이슈로 다가오고 있습니다.&lt;/li&gt;

&lt;li&gt;CSS3를 사용한다는 응답자가 45%로 사용하지 않는다는 44%의 응답자보다 많았습니다.&lt;br /&gt;이는 지난해 22%만이 사용하고 있고 70%가까이 사용하고 있지 않다는 결과보다 비약적으로 많은 상승이 있었습니다.&lt;/li&gt;

&lt;li&gt;지난 설문조사에서 4%만이 @font-face 를 사용하여 글꼴을 표현했지만 이번 설문조사에서는 23%대로 그 사용률이 상승되었습니다.&lt;/li&gt;

&lt;li&gt;HTML5의 현재 몇몇 확장기능들을 지난해 10%가 사용하고 있었던것에 반해 30%정도의 응답자들이 사용하고 있었습니다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;제가 느낀 웹개발 현황은..&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;앞으로 Mac OSX 기반 개발자들이 더 증가할것이다. Mac OSX는 Windows 플랫폼보다 웹개발을 하기에 훨씬 더 좋은 환경을 가지고 있다.&lt;/li&gt;

&lt;li&gt;개발은 FireFox, 웹브라우징은 Chrome, 그러나 Windows OS의 전체적인 보급률 때문에 테스트는 여전히 IE 위주.. ㅠㅠ&lt;/li&gt;

&lt;li&gt;Front End JavaScript Framework부문에서 JQuery의 독주를 막기는 힘들것.&lt;br /&gt;점점 JavaScript == JQuery 화 되어가고 있는 분위기.. prototype.js 는 분발해야.. ㅋㅋ&lt;/li&gt;

&lt;li&gt;HTML4의 오래된 문법이 점점 사라져가는 분위기. XHTML 스타일의 문법을 더욱 즐겨 사용하며 HTML5에서도 유지될것 5. 모바일 브라우저 전쟁은 아직은 두고봐야할것 같음. Android 2.2가 Flash 완벽 지원을 하게되고 Android폰의 점유율이 증가추세에 있기때문..&lt;/li&gt;

&lt;li&gt;웹 Front End 기술의 주축인 HTML, CSS, JavaScript를 활용한 Hybrid Application(Appcelerator Titanium, PhoneGap) 개발프레임웍이 점점 득세하게 될듯.&lt;/li&gt;

&lt;li&gt;Cappuccino 나 SproutCore 와 같은 개발 환경 프레임워크도 점차 발전을 거듭할듯.. 본격적인 MVC 패턴을 적용하기 시작하며 결과적으로 Java와 비슷한 환경이 조성될것..&lt;/li&gt;

&lt;li&gt;HTML5 와 CSS3의 유용함을 적극 활용하는 분위기 조성이 개발자들에 의해 시작되어야 할듯..&lt;br /&gt;또한 이런 분위기 속에 기존에 비표준 브라우저를 위한 삽질과는 다르게 HTML5를 부분적으로 지원하기 위한 또다른 삽질이 예상..&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;여러분의 느낌은 어떠신지요??&lt;/p&gt;

&lt;p&gt;원문출처 : &lt;a href='http://ajaxian.com/archives/the-state-of-web-development-2010-web-directions'&gt;The State of Web Development 2010 - Web Directions&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>파이형 인재</title>
   <link href="http://boxersb.github.io/etc/2010/04/09/pi-type-competent-person"/>
   <updated>2010-04-09T00:00:00+09:00</updated>
   <id>http://boxersb.github.io/etc/2010/04/09/pi-type-competent-person</id>
   <content type="html">&lt;p&gt;20세기에는 I자형, ㅡ자형 인재상이 많았다고 합니다.&lt;/p&gt;

&lt;p&gt;I 자형인재는 한가지 분야에 정통한 전문가형 인재,&lt;br /&gt;ㅡ자형인재는 여러가지 두루 섭렵하지만 깊이는 없는 인재를 가리킵니다..&lt;/p&gt;

&lt;p&gt;21세기에는 T형, A형, 파이형(π)인재상을 추구합니다.&lt;br /&gt;T형인재는 일본의 도요타사가 제시한것으로 한가지분야에 대한 전문성을 갖추는 이외에 광범위한 다른분야의 지식까지 갖추고 있는 인재를 말합니다. I형과 ㅡ형인재의 복합 형태인것 같네요.&lt;br /&gt;A형인재는 안철수박사께서 제시한것으로 두개의 수직선은 전문지식과 다른분야에 대한 상식/포용력을, 하나의 수평선은 소통능력을 의미한다고 합니다.&lt;br /&gt;파이형(π)인재는 2004년도에 삼성종합기술원이 제안한것으로 T자형이 한가지분야의 전문성을 가지고 있는 반면에 두가지 이상의 깊이있는 전문분야를 가지는 인재상이라고 합니다.&lt;/p&gt;

&lt;p&gt;파이형인재는 예를 들면 경영학을 전공하며 경영에 대한 이해가 있음과 동시에 IT산업에 대한 핵심기술을 갖춘 인재로써 미래의 리더로써 성장할수 있는 동력을 가진 인재라고 할수 있겠네요..&lt;/p&gt;

&lt;p&gt;어찌됐든 말장난인것 같지만.. 21세기의 인재가 되려면 상당히 피곤한것만은 사실인것 같습니다 ㅠㅠ&lt;/p&gt;

&lt;p&gt;&lt;img alt='' src='/imgs/pie.jpg' /&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Object의 toString과 toValue 메서드에 대한 고찰</title>
   <link href="http://boxersb.github.io/javascript/2010/04/05/tostring-and-tovalue-of-object"/>
   <updated>2010-04-05T00:00:00+09:00</updated>
   <id>http://boxersb.github.io/javascript/2010/04/05/tostring-and-tovalue-of-object</id>
   <content type="html">&lt;p&gt;&lt;a href='http://twitter.com/bcherry'&gt;Ben Cherry&lt;/a&gt;는 &lt;a href='http://www.adequatelygood.com/2010/3/Object-to-Primitive-Conversions-in-JavaScript'&gt;magic of Object - primitive conversions&lt;/a&gt; 에서 JavaScript의 toString과 toValue 메소드를 이용한 기본 객체형변환에 대해 심도있게 다루었습니다.&lt;/p&gt;

&lt;p&gt;JavaScript에서 특정객체를 alert 혹은 console 에서 확인을 해보면 보통 다음과 같은 결과를 보여줍니다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;           &lt;span class='c1'&gt;// [object Object]&lt;/span&gt;
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){}&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;  &lt;span class='c1'&gt;// function(){}&lt;/span&gt;
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;             &lt;span class='c1'&gt;// 1&lt;/span&gt;
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;       &lt;span class='c1'&gt;//  hello&lt;/span&gt;
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;          &lt;span class='c1'&gt;//  true&lt;/span&gt;
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;    &lt;span class='c1'&gt;// 1,2,3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JavaScript의 모든 객체는 toString 과 toValue 메소드를 갖습니다. 위에 나열된 alert 혹은 console 에서 확인한 결과는 내부적으로 호출된 해당 객체의 toString 메소드의 결과입니다.&lt;/p&gt;

&lt;p&gt;toValue 메소드는 toString과 비슷해 보이지만 각종 연산자에서 사용되었을 경우 객체의 결과 값을 반환하도록 디자인되어 있습니다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt; &lt;span class='p'&gt;}&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;                    &lt;span class='c1'&gt;// [object Object][object Object]&lt;/span&gt;
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){}&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){}&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;  &lt;span class='c1'&gt;// function(){}function(){}&lt;/span&gt;
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;                         &lt;span class='c1'&gt;// 2&lt;/span&gt;
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;hello&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;world&amp;quot;&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;            &lt;span class='c1'&gt;//  helloworld&lt;/span&gt;
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;                  &lt;span class='c1'&gt;//  2&lt;/span&gt;
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;2&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;3&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='mi'&gt;4&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;6&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='p'&gt;);&lt;/span&gt;        &lt;span class='c1'&gt;// 1,2,34,5,6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;아래 toString과 toValue를 확장해서 쓰는 좋은 예제가 있습니다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='nx'&gt;population&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;country&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;pop&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;country&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;country&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
        &lt;span class='nx'&gt;pop&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='nx'&gt;pop&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
 
        &lt;span class='nx'&gt;toString&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;[Population &amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; 
                &lt;span class='s2'&gt;&amp;quot;\&amp;quot;&amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;country&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;\&amp;quot; &amp;quot;&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt;
                &lt;span class='nx'&gt;pop&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt;
            &lt;span class='s2'&gt;&amp;quot;]&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='p'&gt;},&lt;/span&gt;
 
        &lt;span class='nx'&gt;valueOf&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
            &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;pop&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='p'&gt;}&lt;/span&gt;
 
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;america_pop&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;population&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;USA&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;350&lt;/span&gt;&lt;span class='nx'&gt;e6&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;mexico_pop&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;population&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Mexico&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;200&lt;/span&gt;&lt;span class='nx'&gt;e6&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;canada_pop&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;population&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;Canada&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='mi'&gt;200&lt;/span&gt;&lt;span class='nx'&gt;e6&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
 
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;america_pop&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// [Population &amp;quot;USA&amp;quot; 350000000&lt;/span&gt;
 
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;north_america_pop&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;america_pop&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;mexico_pop&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='nx'&gt;canada_pop&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
 
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;north_america_pop&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// 750000000&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;JavaScript의 기본 데이터타입 이외에도 개발자가 직접 개발한 Custom 객체도 toString과 toValue 메소드를 적절히 오버라이딩하면 편리하게 묵시적인 형변환을 사용할 수 있습니다. 해당객체가 어떤 작업을 수행하는 객체인지에 대한 설명(toString)으로 활용할 수도 있고, 해당 객체의 동작상태에 대한 값(toValue)로써도 사용할 수 있습니다.&lt;/p&gt;

&lt;p&gt;다음은 toString, toValue를 잘못 활용한 예입니다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;foo&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
    &lt;span class='nx'&gt;toString&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='mi'&gt;5&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;},&lt;/span&gt;
    &lt;span class='nx'&gt;valueOf&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt; &lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;toString&lt;/span&gt;&lt;span class='p'&gt;()&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// 6 (bad!)&lt;/span&gt;
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;foo&lt;/span&gt; &lt;span class='o'&gt;+&lt;/span&gt; &lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// &amp;quot;foo1&amp;quot; (no good!)&lt;/span&gt;
&lt;span class='nx'&gt;alert&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;+&lt;/span&gt;&lt;span class='nx'&gt;foo&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt; &lt;span class='c1'&gt;// NaN (the worst!)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href='http://twitter.com/bcherry'&gt;Ben Cherry&lt;/a&gt;는 위 묵시적 형변환에 대한 성능적인 검증도 마쳤습니다. toString, toValue를 적절히 활용하면 재사용 가능한 객체를 디자인할때 좀 더 깔끔한 코드를 작성할 수 있습니다. 단지 alert이나 console로 찍어내는것 만으로도 객체의 상태를 알게 할수 있습니다. 즉 디버깅이 쉬워집니다. 또한 모든 브라우저에서 ECMA명세에 의해 위 내용을 구현하고 있어 호환성 이슈가 없습니다.&lt;/p&gt;

&lt;p&gt;그러나 성능적인 측면에서는 대부분의 브라우저가 alert(america_pop) 처럼 묵시적인 toString 메소드 호출보다는 alert(america_pop.toString()) 과 같이 명시적으로 호출하여 객체를 확인하는 것이 빠른것으로 나타났습니다. 아래는 각 브라우저별 묵시적 변환과 명시적 변환법을 사용한 성능비교를 위해 1,000,000번 같은 내용을 반복 호출한 결과표 입니다.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Firefox 3.6.2&lt;/strong&gt; : 874ms vs 320ms - 약 세배빠름&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Chrome5&lt;/strong&gt; : 94ms vs 47ms - 약 두배빠름&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Opera 10.50&lt;/strong&gt; : 115ms vs 182ms - 약간더 느림&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Safari 4&lt;/strong&gt; : 409ms vs 280ms - 약 두배 빠름&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;IE8&lt;/strong&gt; : 2856ms vs 2786ms - 거의 비슷함&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;IE9(preview)&lt;/strong&gt; : 645ms vs 633ms - 거의 비슷함&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;출처 :&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;a href='http://ajaxian.com/archives/a-very-detailed-look-at-object-to-primitive-conversions'&gt;http://ajaxian.com/archives/a-very-detailed-look-at-object-to-primitive-conversions&lt;/a&gt;&lt;br /&gt;&lt;a href='http://www.adequatelygood.com/2010/3/Object-to-Primitive-Conversions-in-JavaScript'&gt;http://www.adequatelygood.com/2010/3/Object-to-Primitive-Conversions-in-JavaScript&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;원문출처를 바탕으로 재구성한 포스트입니다.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Javascript에서 옵저버 패턴 활용하기</title>
   <link href="http://boxersb.github.io/javascript/2010/04/01/observer-pattern-of-javascript"/>
   <updated>2010-04-01T00:00:00+09:00</updated>
   <id>http://boxersb.github.io/javascript/2010/04/01/observer-pattern-of-javascript</id>
   <content type="html">&lt;p&gt;Observer Pattern이란 여러개의 Class를 작성하였을 때 각 Class들간의 연관성을 유지하기 위해 결합도를 높이는 대신 객체의 상태를 관찰하는 방법을 사용하는 디자인 패턴입니다.&lt;/p&gt;

&lt;p&gt;예를 들어 기본적인 MVC 패턴을 사용하여 어플리케이션을 개발하였을 경우 각 Model. View, Controller 클래스들은 각각 다른 역할을 하게됩니다. 그러나 Controller 가 Model과 View의 중심에서 각 객체들에게 명령을 내리면 명령을 받은 객체는 명령의 실행결과나 상태를 Controller에게 보고하여야 합니다. 이때 일반적으로 높은 결합도를 가지게 됩니다. Model이나 View의 입장에선 Controller에게 보고하기 위한 수단으로 Controller의 참조를 취하게 되기 때문이죠&lt;/p&gt;

&lt;p&gt;Controller에서 Model의 메소드를 실행&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;    &lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Model&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Model&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;View&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;View&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;

    &lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Model&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;getMemberList&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Model은 Controller의 참조를 가지고 있으며 요청결과를 Controller에게 알려줌.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;   &lt;span class='nx'&gt;Model&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;controller&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;controller&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;controller&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
   &lt;span class='p'&gt;};&lt;/span&gt;
   &lt;span class='nx'&gt;Model&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
       &lt;span class='c1'&gt;//some code blocks&lt;/span&gt;
       &lt;span class='nx'&gt;getMemberList&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
             &lt;span class='c1'&gt;// request Query and Return&lt;/span&gt;
             &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;controller&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;printMemberList&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
       &lt;span class='p'&gt;}&lt;/span&gt;
   &lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;이런식으로 어플리케이션이 짜여질 경우 Model과 Controller와의 결합도가 매우 높아지기 때문에 재사용성이 떨어지며 유지보수가 힘들어지게 됩니다.&lt;/p&gt;

&lt;p&gt;이때 Observer Pattern을 적용하면 이러한 문제점을 어느정도 해소할 수 있습니다. JavaScript 기반의 Front End 환경에서는 쉽게 예를 들어 DOM Event 모델을 예로 들 수 있겠습니다.&lt;/p&gt;

&lt;p&gt;element가 element를 Control 하는 객체를 알 필요가 없음&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;    &lt;span class='nx'&gt;element&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;addEventListener&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;click&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;onElementClick&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;일반객체에 Custom Event를 만들자 ﻿DOM Event 모델﻿ 이외에도 Observer 패턴은 얼마든지 활용할 수 있습니다. 위에 나왔던 MVC 모델을 예로 들자면.. Model과 View는 Controller의 참조를 취득할 필요 없이.. 특정한 Event를 발생시키도록 작성할 수 있습니다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;Controller&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
    &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Model&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;Model&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
    &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;View&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;new&lt;/span&gt; &lt;span class='nx'&gt;View&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
    &lt;span class='c1'&gt;// some code blocks&lt;/span&gt;
    &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;bindEvents&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
    &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Model&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;getMemberList&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
   &lt;span class='nx'&gt;bindEvents&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
       &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;Model&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;addEvent&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;onGetMemberListComplete&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
                         &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;printMemberList&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
       &lt;span class='c1'&gt;// some code blocks&lt;/span&gt;
   &lt;span class='p'&gt;},&lt;/span&gt;
   &lt;span class='nx'&gt;printMemberList&lt;/span&gt;&lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
       &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;View&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;showMemberList&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
       &lt;span class='c1'&gt;// some code blocks&lt;/span&gt;
   &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위와 같은 방식으로 하면 Model과 View는 Controller를 따로 알필요 없이 Event 모델만으로 동작을 하게 됩니다. 물론 저기서 나오는 addEvent라는 메소드와 onGetMemberListComplete 라는 이벤트 타입은 제가 만들어 낸것이죠.&lt;br /&gt;그럼 어떻게 만드냐구요?? 제가 만든 Observer Class를 공개합니다.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Observer.js&lt;/strong&gt;&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt; &lt;span class='cm'&gt;/*!&lt;/span&gt;
&lt;span class='cm'&gt; * JavaScript Observer&lt;/span&gt;
&lt;span class='cm'&gt; *&lt;/span&gt;
&lt;span class='cm'&gt; * Date: 2010. 4. 1.&lt;/span&gt;
&lt;span class='cm'&gt; * Author: boxersb(Kyoungtaek Koo)&lt;/span&gt;
&lt;span class='cm'&gt; * blog: http://boxersb.github.io&lt;/span&gt;
&lt;span class='cm'&gt; * twitter: @boxersb&lt;/span&gt;
&lt;span class='cm'&gt; * gmail: boxersb@gmail.com&lt;/span&gt;
&lt;span class='cm'&gt; *&lt;/span&gt;
&lt;span class='cm'&gt; * Copyright (c) 2010 boxersb (Kyoungtaek Koo)&lt;/span&gt;
&lt;span class='cm'&gt; */&lt;/span&gt;
&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;Observer&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
  &lt;span class='nx'&gt;EVENTID&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='mi'&gt;0&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
  &lt;span class='nx'&gt;addEvent&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{};&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{};&lt;/span&gt;
    
    &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;eventId&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;Observer&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;EVENTID&lt;/span&gt;&lt;span class='o'&gt;++&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;][&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    
    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='nx'&gt;eventId&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='p'&gt;},&lt;/span&gt;
  
  &lt;span class='nx'&gt;fireEvent&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;handlers&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nx'&gt;eventId&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt;
      &lt;span class='nx'&gt;args&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt;  &lt;span class='nb'&gt;Array&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;slice&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;call&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;arguments&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;stop&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    
    &lt;span class='nx'&gt;args&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;shift&lt;/span&gt;&lt;span class='p'&gt;();&lt;/span&gt;
    &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt; &lt;span class='k'&gt;in&lt;/span&gt; &lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;hasOwnProperty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt;&lt;span class='p'&gt;)){&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt; &lt;span class='o'&gt;!==&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;stop&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='nx'&gt;stop&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
          &lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='nx'&gt;apply&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;args&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt; 
    &lt;span class='p'&gt;};&lt;/span&gt;
  &lt;span class='p'&gt;},&lt;/span&gt;
  
  &lt;span class='nx'&gt;removeEvent&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;handlers&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nx'&gt;eventId&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nx'&gt;hnd&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;function&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt; &lt;span class='k'&gt;in&lt;/span&gt; &lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;hasOwnProperty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;)){&lt;/span&gt;
        &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
          &lt;span class='k'&gt;delete&lt;/span&gt; &lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
          &lt;span class='k'&gt;break&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
        &lt;span class='p'&gt;}&lt;/span&gt; 
      &lt;span class='p'&gt;};&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='k'&gt;delete&lt;/span&gt; &lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt;
      &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
    &lt;span class='p'&gt;};&lt;/span&gt;
  &lt;span class='p'&gt;},&lt;/span&gt;
  
  &lt;span class='nx'&gt;stopEvent&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;handlers&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nx'&gt;eventId&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt; 
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nx'&gt;hnd&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;function&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
        &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt; &lt;span class='k'&gt;in&lt;/span&gt; &lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;hasOwnProperty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;)){&lt;/span&gt;
          &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
            &lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='nx'&gt;stop&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
          &lt;span class='p'&gt;}&lt;/span&gt;
        &lt;span class='p'&gt;};&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='nx'&gt;stop&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;  
      &lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;stop&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='p'&gt;},&lt;/span&gt;
  
  &lt;span class='nx'&gt;restoreEvent&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt; &lt;span class='o'&gt;||&lt;/span&gt; &lt;span class='o'&gt;!&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;])&lt;/span&gt; &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;handlers&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;listeners&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;type&lt;/span&gt;&lt;span class='p'&gt;],&lt;/span&gt; &lt;span class='nx'&gt;eventId&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='o'&gt;-&lt;/span&gt;&lt;span class='mi'&gt;1&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;typeof&lt;/span&gt; &lt;span class='nx'&gt;hnd&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='s2'&gt;&amp;quot;function&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
        &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt; &lt;span class='k'&gt;in&lt;/span&gt; &lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;)&lt;/span&gt; &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;hasOwnProperty&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;f&lt;/span&gt;&lt;span class='p'&gt;)){&lt;/span&gt;
          &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;===&lt;/span&gt; &lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
            &lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;eventId&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='nx'&gt;stop&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
          &lt;span class='p'&gt;}&lt;/span&gt;
        &lt;span class='p'&gt;};&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
        &lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;hnd&lt;/span&gt;&lt;span class='p'&gt;].&lt;/span&gt;&lt;span class='nx'&gt;stop&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;&lt;span class='k'&gt;else&lt;/span&gt;&lt;span class='p'&gt;{&lt;/span&gt;
      &lt;span class='nx'&gt;handlers&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;stop&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kc'&gt;false&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
    &lt;span class='p'&gt;}&lt;/span&gt;
  &lt;span class='p'&gt;},&lt;/span&gt;
  
  &lt;span class='nx'&gt;applyObserver&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;tclass&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
    &lt;span class='k'&gt;for&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;p&lt;/span&gt; &lt;span class='k'&gt;in&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;
      &lt;span class='k'&gt;if&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;p&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;!==&lt;/span&gt; &lt;span class='nx'&gt;arguments&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;callee&lt;/span&gt;&lt;span class='p'&gt;){&lt;/span&gt;       
        &lt;span class='nx'&gt;tclass&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;p&lt;/span&gt;&lt;span class='p'&gt;]&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;[&lt;/span&gt;&lt;span class='nx'&gt;p&lt;/span&gt;&lt;span class='p'&gt;];&lt;/span&gt;
      &lt;span class='p'&gt;}&lt;/span&gt;
    &lt;span class='p'&gt;};&lt;/span&gt;

    &lt;span class='k'&gt;return&lt;/span&gt; &lt;span class='kc'&gt;true&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
  &lt;span class='p'&gt;}&lt;/span&gt;
&lt;span class='p'&gt;};&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;위 Observer 객체를 사용하여 Event 모델을 구축합니다.&lt;/p&gt;
&lt;div class='highlight'&gt;&lt;pre&gt;&lt;code class='javascript'&gt;    &lt;span class='c1'&gt;// Controller definitions...&lt;/span&gt;
   &lt;span class='nx'&gt;Observer&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;applyObserver&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;Controller&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
   &lt;span class='nx'&gt;Model&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
       &lt;span class='c1'&gt;// some code blocks&lt;/span&gt;
   &lt;span class='p'&gt;};&lt;/span&gt;
   &lt;span class='nx'&gt;Model&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;prototype&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='p'&gt;{&lt;/span&gt;
       &lt;span class='c1'&gt;//some code blocks&lt;/span&gt;
       &lt;span class='nx'&gt;getMemberList&lt;/span&gt; &lt;span class='o'&gt;:&lt;/span&gt; &lt;span class='kd'&gt;function&lt;/span&gt;&lt;span class='p'&gt;(){&lt;/span&gt;
             &lt;span class='c1'&gt;// request Query and Return&lt;/span&gt;
            &lt;span class='kd'&gt;var&lt;/span&gt; &lt;span class='nx'&gt;data&lt;/span&gt; &lt;span class='o'&gt;=&lt;/span&gt; &lt;span class='nx'&gt;xhr&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;responseXML&lt;/span&gt;&lt;span class='p'&gt;;&lt;/span&gt;
             &lt;span class='k'&gt;this&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;fireEvent&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='s2'&gt;&amp;quot;onGetMemberListComplete&amp;quot;&lt;/span&gt;&lt;span class='p'&gt;,&lt;/span&gt; &lt;span class='nx'&gt;data&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
       &lt;span class='p'&gt;}&lt;/span&gt;
   &lt;span class='p'&gt;};&lt;/span&gt;
   &lt;span class='nx'&gt;Observer&lt;/span&gt;&lt;span class='p'&gt;.&lt;/span&gt;&lt;span class='nx'&gt;applyObserver&lt;/span&gt;&lt;span class='p'&gt;(&lt;/span&gt;&lt;span class='nx'&gt;Model&lt;/span&gt;&lt;span class='p'&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;addEvent&lt;/strong&gt;(_type, handler_) - 관찰(Observe)할 이벤트를 추가한다. 이벤트 타입은 자유롭게 설정.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;fireEvent&lt;/strong&gt;(_type, args.._) - 관찰하고 있는 이벤트 type의 모든 헨들러를 호출한다.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;removeEvent&lt;/strong&gt;(_type, handler_) - 특정 이벤트 옵저버를 제거한다.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;stopEvent&lt;/strong&gt;(_type, handler_) - 특정 이벤트 옵저버를 일시적으로 정지시킨다(제거하지 않음)&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;restoreEvent&lt;/strong&gt;(_type, handler_) - 정지된 특정 이벤트 옵저버를 복원한다.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;applyObserver&lt;/strong&gt;(_tclass_) - 대상 클래스에 Observer API를 확장한다.&lt;/li&gt;
&lt;/ul&gt;</content>
 </entry>
 
 <entry>
   <title>파이어폭스에서 한글관련 이벤트 처리 트릭</title>
   <link href="http://boxersb.github.io/javascript/2007/03/12/firefox-korean-lang-trick"/>
   <updated>2007-03-12T00:00:00+09:00</updated>
   <id>http://boxersb.github.io/javascript/2007/03/12/firefox-korean-lang-trick</id>
   <content type="html">&lt;p&gt;파이어폭스의 인기가 전세계적으로 높아지고 있습니다만&amp;#8230;&lt;/p&gt;

&lt;p&gt;한글 및 기타 아시아권 언어입력시 이벤트 헨들러가 호출되지 않고 있는문제는 아직도 고쳐지고 있지 않습니다..&lt;/p&gt;

&lt;p&gt;다들 아시죠???&lt;/p&gt;

&lt;p&gt;우리가 흔히 쓰는 입력박스에서의 이벤트 헨들링 -(대표적으로 자동완성기능[서제스트])- 을 하고자 할때 한글을 입력하면 이벤트 헨들러가 호출되지 않는 치명적인 문제가 있습니다..&lt;/p&gt;

&lt;p&gt;아래의 버그질라 링크를 보시면 한글 입력시 이벤트 헨들러를 호출할 수 있게끔 하는 작은 트릭을 경험해 보실 수 있습니다.&lt;/p&gt;

&lt;p&gt;&lt;a href='https://bugzilla.mozilla.org/attachment.cgi?id=240567'&gt;https://bugzilla.mozilla.org/attachment.cgi?id=240567&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;문제의 요지는 간단합니다&amp;#8230; 한글을 입력할시 파이어폭스의 한글입력기는 글자 조합을 하기위해 value세팅과 이벤트 헨들러 호출을 정지 시킵니다.. 정확히 말해 onkeydown이나 onkeyup이벤트발생시 헨들러가 최초 한번은 호출됩니다. 그러나 한글 조합을 위해 value는 세팅되어 있지 않습니다. 이 문제를 피해가기 위해서는..&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;db라는 가상의 변수를 만듭니다.&lt;/li&gt;

&lt;li&gt;현재 입력필드의 value 값이 db의 값과 같은지를 비교합니다..&lt;/li&gt;

&lt;li&gt;value의 값을 확인합니다.&lt;br /&gt;3-1. 다르다면 db값을 현재 value로 세팅하고 원래 하고자 했던 이벤트 헨들링을 합니다.&lt;br /&gt;3-2. 같다면 이벤트 헨들링 코드를 실행하지 않고 넘어갑니다.&lt;/li&gt;

&lt;li&gt;setTimeout을 이용하여 이벤트 헨들러 자체를 다시 부릅니다. 즉, 재귀적으로 호출합니다. (recursive)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;간단히 말해 setTimeout을 이용하여 재귀호출을 할시 브라우저 입장에서는 이벤트가 발생하여 헨들러가 호출되는것이 아닌 일반 함수의 실행으로 간주하게 됩니다. 그렇게하면 세팅된 value를 가지고 이벤트 헨들링을 할 수 있습니다.&lt;/p&gt;

&lt;p&gt;재귀적 호출을 계속할 경우 CPU점유율 및 시스템이 불안해 지지 않냐.. 라는 의문을 가지는건 당연합니다. 그렇기 때문에 부담이되는 이벤트 헨들링 코드는 db에 현재 value를 세팅할때 (3-1)만 실행합니다. 이미 같다면 이벤트는 헨들링 된것이고 비교외에 아무것도 실행하지 않았기 때문에 커다란 부담이 되지 않습니다. 만약 그래도 불안하다면 특정동작시 setTimeout 했던것을 clear 하는 코드를 추가해주시면 훨신 안정적으로 돌릴 수 있습니다.. cpu점유율 및 다방면 테스트 결과 트릭을 쓰지 않았을 경우와 큰 차이가 없었습니다.&lt;/p&gt;</content>
 </entry>
 
 
</feed>